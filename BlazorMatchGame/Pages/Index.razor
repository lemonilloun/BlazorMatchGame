@page "/"
@using System.Timers

<style>

    .container {
        width: 400px;
    }

    button {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }

</style>


<PageTitle>Cat Matching Game</PageTitle>

<div class="container">
    <div class="row">
        @for (var catNumber = 0; catNumber < shuffledCats.Count(); catNumber++)
            {
                var cat = shuffledCats[catNumber];
                var uniqDescription = $"Button #{catNumber}";
                <div class="col-3">
                    <button @onclick="@(() => ButtonClick(cat, uniqDescription))" type="button" class="btn btn-outline-dark">
                        <h1>@cat</h1>
                    </button>
                </div>
            }
    </div>
    <div class="row">
        <h2>Matches found: @matchesFound</h2>
    </div>
    <div class="row">
        <h2>Time: @timeDisplay</h2>
    </div>
</div>

@code {
        List<string> catsEmoji = new List<string>()
    {
        "😺", "😺",
        "😸", "😸",
        "😹", "😹",
        "😻", "😻",
        "😼", "😼",
        "😽", "😽",
        "😿", "😿",
        "🐈", "🐈",
    };

        List<string> shuffledCats = new List<string>();
        int matchesFound = 0;
        Timer timer;
        int tenthsOfSecondsElapsed = 0;
        string timeDisplay;

    protected override void OnInitialized()
    {
        timer = new Timer(100);
        timer.Elapsed += Timer_Tick;
        SetUpGame();

    }

    private void SetUpGame()
    {
        Random random = new Random();
        shuffledCats = catsEmoji.OrderBy(item => random.Next()).ToList();
        matchesFound = 0;
        tenthsOfSecondsElapsed = 0;

    }

    string lastCatFound = string.Empty;
    string lastDescription = string.Empty;

    private void ButtonClick(string cat, string catDescription)
    {
        if (lastCatFound == string.Empty)
        {
            lastCatFound = cat;
            lastDescription = catDescription;
            timer.Start();
        }
        else if ((lastCatFound == cat) && (lastDescription != catDescription))
        {
            lastCatFound = string.Empty;
            shuffledCats = shuffledCats.Select(a => a.Replace(cat, string.Empty)).ToList();

            matchesFound++;
            if (matchesFound == 8)
            {
                timer.Stop();
                timeDisplay += "- Play again?";
                SetUpGame();
            }
        }
        else
        {
            lastCatFound = string.Empty;
        }
    }

    private void Timer_Tick(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            tenthsOfSecondsElapsed++;
            timeDisplay = (tenthsOfSecondsElapsed / 10F).ToString("0.0s");
            StateHasChanged();
        });
    }
}